@model IEnumerable<MenuItem>

@{
    ViewData["Title"] = "Menu Items";
}

@if (User.IsInRole("Admin"))
{
    <h1>Menu Items</h1>

    <p>
        <a asp-action="Create" class="btn btn-primary">Create New</a>
    </p>

    <div class="mb-3">
        <a asp-action="Available" class="btn btn-success me-2">View Available Items</a>
        <a asp-action="ByCategory" asp-route-category="Burgers" class="btn btn-outline-primary me-2">Burgers</a>
        <a asp-action="ByCategory" asp-route-category="Sides" class="btn btn-outline-primary me-2">Sides</a>
        <a asp-action="ByCategory" asp-route-category="Drinks" class="btn btn-outline-primary me-2">Drinks</a>
    </div>

    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Category</th>
                <th>Price</th>
                <th>Availability</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Description</td>
                    <td><span class="badge bg-secondary">@item.Category</span></td>
                    <td>@item.Price.ToString("C")</td>
                    <td>
                        @if (item.Availability)
                        {
                            <span class="badge bg-success">Available</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">Unavailable</span>
                        }
                    </td>
                    <td>
                        <a asp-action="Details" asp-route-id="@item.ItemId" class="btn btn-info btn-sm">Details</a>
                        <a asp-action="Edit" asp-route-id="@item.ItemId" class="btn btn-warning btn-sm">Edit</a>
                        <a asp-action="Delete" asp-route-id="@item.ItemId" class="btn btn-danger btn-sm">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
  
    <div class="container-fluid mt-4 position-relative">
        <div class="row">
            <div class="col-md-3">
                <div class="p-3 border rounded bg-light mb-3">
                    <p><strong>For Breakfast</strong> last order time is <b>11:30 a.m. same day!</b></p>
                    <p><strong>For Lunch</strong> last order time is <b>4 p.m. one day before!</b></p>
                    <p><strong>For Snacks (Evening)</strong> last order time is <b>6 p.m. same day!</b></p>
                    <p><strong>For Dinner</strong> last order time is <b>10 p.m. same day!</b></p>


                </div>
                <div class="alert alert-warning small">
                    Some items must be ordered at least a few hours in advance.
                    Please check this information when ordering. Cancellations must also be made within that time.
                </div>
                <div class="alert alert-danger small">
                    Penalties apply to heavy snack items. Cancel accordingly.
                    Contact food committee for more details.
                </div>
            </div>

            
            <div class="col-md-9" id="menuItemsRow">

                <div class="mb-3">
                    <input id="searchBox" type="text" class="form-control" placeholder="Search by name, category, or date...">
                </div>

                @foreach (var dayGroup in Model.GroupBy(m => m.CreatedAt.Date).OrderByDescending(g => g.Key))
                {
                    <div class="card shadow-sm mb-4 menu-day-group" data-day="@dayGroup.Key.ToString("dd MMM yyyy")">
                        <div class="card-header bg-primary text-white fw-bold">
                            @dayGroup.Key.ToString("dddd, yyyy-MM-dd")
                        </div>
                        <div class="card-body p-0">
                            <ul class="list-group list-group-flush">
                                @foreach (var item in dayGroup)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center menu-item"
                                        data-name="@item.Name.ToLower()"
                                        data-category="@item.Category.ToLower()"
                                        data-day="@item.CreatedAt.ToString("dd MMM yyyy").ToLower()">

                                        <div>
                                            <strong>@item.Name</strong>
                                            <span class="text-muted">(@item.Category)</span>
                                        </div>

                                        <div class="d-flex align-items-center gap-2">
                                            <span class="badge @(item.Availability ? "bg-success" : "bg-danger")">
                                                @(item.Availability ? "Available" : "Unavailable")
                                            </span>
                                            <a asp-action="Details" asp-route-id="@item.ItemId"
                                               class="btn btn-sm btn-outline-primary">
                                                View
                                            </a>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <style>
        .card {
            border-radius: 10px;
            overflow: hidden;
        }

        .card-header {
            font-size: 1rem;
            padding: 0.75rem 1rem;
        }

        .list-group-item {
            font-size: 0.95rem;
            padding: 0.75rem 1rem;
        }
    </style>

    @section Scripts {
        <script>
           
            const searchBox = document.getElementById('searchBox');
            if (searchBox) {
                searchBox.addEventListener('input', function () {
                    const query = this.value.toLowerCase();
                    document.querySelectorAll('.menu-item').forEach(item => {
                        const name = item.dataset.name;
                        const category = item.dataset.category;
                        const day = item.dataset.day;
                        if (name.includes(query) || category.includes(query) || day.includes(query)) {
                            item.style.display = '';
                        } else {
                            item.style.display = 'none';
                        }
                    });

                    document.querySelectorAll('.menu-day-group').forEach(group => {
                        const visibleItems = group.querySelectorAll('.menu-item:not([style*="display: none"])');
                        group.style.display = visibleItems.length > 0 ? '' : 'none';
                    });
                });
            }
        </script>
    }
}
