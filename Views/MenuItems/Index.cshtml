@model IEnumerable<MenuItem>

@{
    ViewData["Title"] = "Menu Items";
}

@if (User.IsInRole("Admin"))
{
    <div class="container-fluid mt-4">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h1 class="text-primary fw-bold">Everyday Menu Items</h1>
            <a asp-action="Create" class="btn btn-primary btn-lg shadow-sm">Enter New Food</a>
        </div>

        <div class="mb-3">
            <a asp-action="Available" class="btn btn-success me-2 shadow-sm">View Available Items</a>
            <a asp-action="ByCategory" asp-route-category="Burgers" class="btn btn-outline-primary me-2 shadow-sm">Burgers</a>
            <a asp-action="ByCategory" asp-route-category="Sides" class="btn btn-outline-primary me-2 shadow-sm">Sides</a>
            <a asp-action="ByCategory" asp-route-category="Drinks" class="btn btn-outline-primary me-2 shadow-sm">Drinks</a>
        </div>

        <div class="mb-4">
            <input id="searchBox" type="text" class="form-control search-box shadow-sm" placeholder="Search by name, category, or date...">
        </div>




        @foreach (var dayGroup in Model.GroupBy(m => m.CreatedAt.Date).OrderByDescending(g => g.Key))
        {
            <div class="mb-4 menu-day-group" data-day="@dayGroup.Key.ToString("dd MMM yyyy")">
                <h5 class="text-secondary mb-3 border-bottom pb-2">@dayGroup.Key.ToString("dddd, yyyy-MM-dd")</h5>
                <div class="row row-cols-1 row-cols-md-3 g-4">
                    @foreach (var item in dayGroup)
                    {
                        <div class="col">
                            <div class="menu-card card h-100 shadow-sm menu-item"
                                 data-name="@item.Name.ToLower()"
                                 data-category="@item.Category.ToLower()"
                                 data-day="@item.CreatedAt.ToString("dd MMM yyyy").ToLower()">
                                <div class="card-body d-flex flex-column">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <h5 class="card-title mb-0">@item.Name</h5>
                                        <span class="badge category-badge">@item.Category</span>
                                    </div>
                                    <p class="card-text text-muted flex-grow-1">@item.Description</p>

                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <span class="price-text fw-bold">@item.Price.ToString("C")</span>
                                        <span class="badge @(item.Availability ? "bg-success" : "bg-danger") availability-badge">
                                            @(item.Availability ? "Available" : "Unavailable")
                                        </span>
                                    </div>

                                    <div class="d-flex gap-2 mt-auto">
                                        <a asp-action="Edit" asp-route-id="@item.ItemId" class="btn btn-outline-primary btn-sm flex-fill">
                                            <i class="bi bi-pencil-fill"></i> Edit
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@item.ItemId" class="btn btn-outline-danger btn-sm flex-fill">
                                            <i class="bi bi-trash-fill"></i> Delete
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="container-fluid mt-4 position-relative">
        <div class="row">
            <div class="col-md-3">
                <div class="p-3 border rounded bg-light mb-3">
                    <p><strong>For Breakfast</strong> last order time is <b>11:30 a.m. same day!</b></p>
                    <p><strong>For Lunch</strong> last order time is <b>4 p.m. one day before!</b></p>
                    <p><strong>For Snacks (Evening)</strong> last order time is <b>6 p.m. same day!</b></p>
                    <p><strong>For Dinner</strong> last order time is <b>10 p.m. same day!</b></p>
                </div>
                <div class="alert alert-warning small">
                    Some items must be ordered at least a few hours in advance.
                    Please check this information when ordering. Cancellations must also be made within that time.
                </div>
                <div class="alert alert-danger small">
                    Penalties apply to heavy snack items. Cancel accordingly.
                    Contact food committee for more details.
                </div>
            </div>

            <div class="col-md-9" id="menuItemsRow">
               
                <div class="mb-3 d-flex align-items-center gap-2">
                    <input id="searchBox" type="text" class="form-control flex-grow-1" placeholder="Search by name, category, or date...">
                    <button id="cartBtn" class="btn btn-warning">
                        Cart (<span id="cartCount">0</span>)
                    </button>
                </div>

                @foreach (var dayGroup in Model.GroupBy(m => m.CreatedAt.Date).OrderByDescending(g => g.Key))
                {
                    <div class="card shadow-sm mb-4 menu-day-group" data-day="@dayGroup.Key.ToString("dd MMM yyyy")">
                        <div class="card-header bg-primary text-white fw-bold">
                            @dayGroup.Key.ToString("dddd, yyyy-MM-dd")
                        </div>
                        <div class="card-body p-0">
                            <ul class="list-group list-group-flush">
                                @foreach (var item in dayGroup)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center menu-item"
                                        data-name="@item.Name.ToLower()"
                                        data-category="@item.Category.ToLower()"
                                        data-day="@item.CreatedAt.ToString("dd MMM yyyy").ToLower()">

                                        <div>
                                            <strong>@item.Name</strong>
                                            <span class="text-muted">(@item.Category)</span>
                                        </div>

                                        <div class="d-flex align-items-center gap-2">
                                            <span class="badge @(item.Availability ? "bg-success" : "bg-danger")">
                                                @(item.Availability ? "Available" : "Unavailable")
                                            </span>
                                            <a asp-action="Details" asp-route-id="@item.ItemId"
                                               class="btn btn-sm btn-outline-primary">
                                                View
                                            </a>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

<style>
    .card {
        border-radius: 10px;
        overflow: hidden;
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        }

    .card-title {
        font-size: 1.1rem;
        font-weight: 600;
    }

    .card-text {
        font-size: 0.95rem;
    }

    #searchBox {
        max-width: 100%;
    }

    #cartBtn {
        white-space: nowrap;
        height: 38px; 
    }

    .menu-card {
        border-radius: 12px;
        background: linear-gradient(145deg, #ffffff, #f8f9fa);
        transition: transform 0.25s ease, box-shadow 0.25s ease;
        overflow: hidden;
    }

        .menu-card:hover {
            transform: translateY(-7px);
            box-shadow: 0 12px 25px rgba(0, 0, 0, 0.18);
        }

    .category-badge {
        background: linear-gradient(135deg, #6c757d, #495057);
        color: #fff;
        font-size: 0.75rem;
        padding: 0.35em 0.6em;
        border-radius: 0.5rem;
    }

    .availability-badge {
        font-size: 0.8rem;
        padding: 0.35em 0.6em;
    }

    .price-text {
        font-size: 1rem;
        color: #0d6efd;
    }

    h5.text-secondary {
        font-weight: 600;
        color: #0d6efd;
    }

    
    @@media (max-width: 576px) {
        .d-flex.align-items-center.gap-2

    {
        flex-direction: column;
        align-items: stretch;
    }

    #cartBtn {
        width: 100%;
    }

    }
</style>

@section Scripts {
    <script>
        const searchBox = document.getElementById('searchBox');
        if (searchBox) {
            searchBox.addEventListener('input', function () {
                const query = this.value.toLowerCase();

                document.querySelectorAll('.menu-item').forEach(item => {
                    const name = item.dataset.name;
                    const category = item.dataset.category;
                    const day = item.dataset.day;
                    if (name.includes(query) || category.includes(query) || day.includes(query)) {
                        item.parentElement.style.display = '';
                    } else {
                        item.parentElement.style.display = 'none';
                    }
                });

                document.querySelectorAll('.menu-day-group').forEach(group => {
                    const visibleItems = group.querySelectorAll('.menu-item:not([style*="display: none"])');
                    group.style.display = visibleItems.length > 0 ? '' : 'none';
                });
            });
        }

        function updateCartCount() {
            const cart = JSON.parse(localStorage.getItem('foodCart')) || [];
            document.getElementById('cartCount').innerText = cart.length;
        }

        document.getElementById('cartBtn').addEventListener('click', function() {
            window.location.href = '@Url.Action("Cart", "Orders")';
        });

        updateCartCount();
    </script>
}
