@model IEnumerable<MenuItem>

@{
    ViewData["Title"] = "Menu Items";
}
@{
    var today = DateTime.Today;
    var todaysItems = Model.Where(m => m.CreatedAt.Date == today).ToList();
    var todayCategories = todaysItems.Select(i => i.Category).Distinct().ToList();
}

@if (User.IsInRole("Admin"))
{
    <div class="container-fluid mt-4">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h1 class="text-primary fw-bold">Everyday Menu Items</h1>
            <a asp-action="Create" class="btn btn-primary btn-lg shadow-sm">Enter New Food</a>
        </div>

        <div class="mb-3">
            <a asp-action="Available" class="btn btn-success me-2 shadow-sm">View Available Items</a>
            <a asp-action="ByCategory" asp-route-category="Burgers" class="btn btn-outline-primary me-2 shadow-sm">Burgers</a>
            <a asp-action="ByCategory" asp-route-category="Sides" class="btn btn-outline-primary me-2 shadow-sm">Sides</a>
            <a asp-action="ByCategory" asp-route-category="Drinks" class="btn btn-outline-primary me-2 shadow-sm">Drinks</a>
        </div>

        <div class="mb-4">
            <input id="searchBox" type="text" class="form-control search-box shadow-sm" placeholder="Search by name, category, or date...">
        </div>

        @foreach (var dayGroup in Model.GroupBy(m => m.CreatedAt.Date).OrderByDescending(g => g.Key))
        {
            <div class="mb-4 menu-day-group" data-day="@dayGroup.Key.ToString("dd MMM yyyy")">
                <h5 class="text-secondary mb-3 border-bottom pb-2">@dayGroup.Key.ToString("dddd, yyyy-MM-dd")</h5>
                <div class="row row-cols-1 row-cols-md-3 g-4">
                    @foreach (var item in dayGroup)
                    {
                        <div class="col">
                            <div class="menu-card card h-100 shadow-sm menu-item"
                                 data-name="@item.Name.ToLower()"
                                 data-category="@item.Category.ToLower()"
                                 data-day="@item.CreatedAt.ToString("dd MMM yyyy").ToLower()">
                                <div class="card-body d-flex flex-column">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <h5 class="card-title mb-0">@item.Name</h5>
                                        <span class="badge category-badge">@item.Category</span>
                                    </div>
                                    <p class="card-text text-muted flex-grow-1">@item.Description</p>

                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <span class="price-text fw-bold">@item.Price.ToString("C")</span>
                                        <span class="badge @(item.Availability ? "bg-success" : "bg-danger") availability-badge">
                                            @(item.Availability ? "Available" : "Unavailable")
                                        </span>
                                    </div>

                                    <div class="d-flex gap-2 mt-auto">
                                        <a asp-action="Edit" asp-route-id="@item.ItemId" class="btn btn-outline-primary btn-sm flex-fill">
                                            <i class="bi bi-pencil-fill"></i> Edit
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@item.ItemId" class="btn btn-outline-danger btn-sm flex-fill">
                                            <i class="bi bi-trash-fill"></i> Delete
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}
else
{



    <div class="container-fluid mt-4 position-relative">
        <div class="row">
            <div class="col-md-3">
                <div class="p-3 border rounded bg-light mb-3">
                    <p><strong>For Breakfast</strong> last order time is <b>11:30 a.m. same day!</b></p>
                    <p><strong>For Lunch</strong> last order time is <b>4 p.m. one day before!</b></p>
                    <p><strong>For Snacks (Evening)</strong> last order time is <b>6 p.m. same day!</b></p>
                    <p><strong>For Dinner</strong> last order time is <b>10 p.m. same day!</b></p>
                </div>
                <div class="alert alert-warning small">
                    Some items must be ordered at least a few hours in advance.
                    Please check this information when ordering. Cancellations must also be made within that time.
                </div>
                <div class="alert alert-danger small">
                    Penalties apply to heavy snack items. Cancel accordingly.
                    Contact food committee for more details.
                </div>
            </div>

            <div class="col-md-9" id="menuItemsRow">

                <div class="mb-3 d-flex align-items-center gap-2 flex-wrap">
                    <input id="searchBox" type="text" class="form-control flex-grow-1" placeholder="Search today's items by name or category...">
                    <button id="cartBtn" type="button" class="btn btn-warning">
                        Cart (<span id="cartCount">0</span>)
                    </button>
                </div>


                <div class="mb-3" id="categoryFilters">
                    <button type="button" class="btn btn-outline-primary me-2 shadow-sm category-btn" data-category="all">All</button>
                    @foreach (var cat in todayCategories)
                    {
                        <button type="button" class="btn btn-outline-primary me-2 shadow-sm category-btn" data-category="@cat.ToLower()">@cat</button>
                    }
                </div>

                @if (todaysItems.Any())
                {
                    <div class="card shadow-sm mb-4 menu-day-group">
                        <div class="card-header bg-primary text-white fw-bold">
                            Today's Menu (@today.ToString("dddd, yyyy-MM-dd"))
                        </div>
                        <div class="card-body p-0">
                            <ul class="list-group list-group-flush todays-items">
                                @foreach (var item in todaysItems)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center menu-item"
                                        data-name="@item.Name.ToLower()"
                                        data-category="@item.Category.ToLower()">

                                        <div>
                                            <strong>@item.Name</strong>
                                            <span class="text-muted">(@item.Category)</span>
                                        </div>

                                        <div class="d-flex align-items-center gap-2">
                                            <span class="badge @(item.Availability ? "bg-success" : "bg-danger")">
                                                @(item.Availability ? "Available" : "Unavailable")
                                            </span>
                                            <a asp-action="Details" asp-route-id="@item.ItemId"
                                               class="btn btn-sm btn-outline-primary">
                                                View
                                            </a>
                                        </div>
                                    </li>
                                }
                            </ul>

                            <div id="noResults" class="alert alert-info text-center shadow-sm" style="display:none;">
                                No items match your filter. Try a different category or clear the search.
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="alert alert-info text-center shadow-sm">
                        No menu available for today. Please check back later.
                    </div>
                }
            </div>
        </div>
    </div>

    @section Scripts {
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const searchBox = document.getElementById('searchBox');
                const categoryButtons = Array.from(document.querySelectorAll('.category-btn'));
                const items = Array.from(document.querySelectorAll('.todays-items .menu-item'));
                const noResultsEl = document.getElementById('noResults');
                let selectedCategory = 'all';

                function normalize(text) {
                    return (text || '').toString().trim().toLowerCase();
                }

                function matchesCategory(itemEl, category) {
                    if (!category || category === 'all') return true;
                    return normalize(itemEl.dataset.category) === category;
                }

                function matchesQuery(itemEl, query) {
                    if (!query) return true;
                    const name = normalize(itemEl.dataset.name);
                    const category = normalize(itemEl.dataset.category);
                    return name.includes(query) || category.includes(query);
                }

                function filterItems() {
                    const q = normalize(searchBox ? searchBox.value : '');
                    let visibleCount = 0;

                    items.forEach(item => {
                        const ok = matchesCategory(item, selectedCategory) && matchesQuery(item, q);
                        item.style.display = ok ? '' : 'none';
                        if (ok) visibleCount++;
                    });

                    if (noResultsEl) {
                        noResultsEl.style.display = visibleCount > 0 ? 'none' : '';
                    }
                }

                if (searchBox) searchBox.addEventListener('input', filterItems);

                categoryButtons.forEach(btn => {
                    btn.addEventListener('click', function (e) {
                        e.preventDefault();
                        selectedCategory = normalize(this.dataset.category);

                        categoryButtons.forEach(b => {
                            b.classList.remove('btn-primary', 'active');
                            b.classList.add('btn-outline-primary');
                        });

                        this.classList.remove('btn-outline-primary');
                        this.classList.add('btn-primary', 'active');

                        filterItems();
                    });
                });


                const allBtn = document.querySelector('.category-btn[data-category="all"]');
                if (allBtn) {
                    allBtn.classList.remove('btn-outline-primary');
                    allBtn.classList.add('btn-primary', 'active');
                }


                const cartBtn = document.getElementById('cartBtn');
                if (cartBtn) {
                    cartBtn.addEventListener('click', function () {
                        window.location.href = '@Url.Action("Cart", "Orders")';
                    });
                }

                function updateCartCount() {
                    try {
                        const cart = JSON.parse(localStorage.getItem('foodCart')) || [];
                        const cntEl = document.getElementById('cartCount');
                        if (cntEl) cntEl.innerText = cart.length;
                    } catch (e) {}
                }

                updateCartCount();
                filterItems();
            });
        </script>
    }
}
